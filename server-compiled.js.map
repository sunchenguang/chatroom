{"version":3,"sources":["server.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AAUA,QAAQ,GAAR,CAAY,eAAZ,GAA8B,cAA9B;;;AAGA,IAAI,OAAO,QAAQ,QAAR,CAAX;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,WAAW,QAAQ,GAAR,EAAa,KAAb,EAAf;;;;AAKA,IAAK,QAAQ,QAAT,IACD,QAAQ,QAAR,CAAiB,OAAjB,CAAyB,SAAzB,IAAsC,CADrC,IAED,QAAQ,GAAR,CAAY,QAAZ,KAAuB,MAFtB,IAEkC,QAAQ,GAAR,CAAY,QAAZ,KAAuB,aAFzD,IAGD,QAAQ,QAAR,CAAiB,OAAjB,CAAyB,iBAAzB,IAA4C,CAH/C,EAGmD;;;AAG/C,YAAQ,GAAR,CAAY,WAAZ;;AAEA,QAAI,WAAW,QAAQ,GAAR,CAAY,SAAZ,IAAyB,QAAQ,IAAR,EAAc,IAAd,GAAqB,MAA7D;;;AAGA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAApB,EAA8B,KAAK,CAAnC,EAAsC;AAClC,gBAAQ,GAAR,CAAa,UAAb,EAAwB,CAAxB;AACA,gBAAQ,IAAR;AACH;;;AAGD,YAAQ,EAAR,CAAW,MAAX,EAAmB,UAAU,MAAV,EAAkB;;AAEjC,gBAAQ,GAAR,CAAY,YAAY,OAAO,EAAnB,GAAwB,UAApC;AACA,gBAAQ,IAAR;AAEH,KALD;;;AAQH,CAzBD,MAyBO;;AAEH,YAAI,WAAW,CAAf;AACA,YAAI,CAAC,QAAQ,QAAb,EACA;AACI,uBAAW,QAAQ,MAAR,CAAe,EAA1B;AACH;;AAED,aAAK,KAAL,CAAW,EAAE,UAAU,Q,8BAAZ,EAAX,EAAiE,UAAU,GAAV,EAAe;AAC9E,gBAAI,SAAS,IAAI,SAAJ,EAAb;AACA,gBAAI,OAAO,OAAO,KAAP,IAAgB,OAAO,KAAP,CAAa,IAA7B,GAAoC,OAAO,KAAP,CAAa,IAAjD,GAAwD,OAAO,IAAP,CAAY,IAA/E;AACA,oBAAQ,GAAR,CAAY,8BAA8B,IAA9B,GAAqC,IAArC,GAA4C,QAAQ,GAAR,CAAY,QAAxD,GAAmE,sBAA/E,EAAuG,QAAvG;;AAEA,qBAAS,OAAT,CAAiB,GAAjB;AACD,SAND;AAOH;;AAED,OAAO,OAAP,GAAiB,SAAS,OAA1B","file":"server-compiled.js","sourcesContent":["'use strict';\n\n/*\nvar cl = console.log;\nconsole.log = function(){\n  console.trace();\n  cl.apply(console,arguments);\n};\n*/\n\nprocess.env.NODE_CONFIG_DIR = './config/env';\n\n// Requires meanio\nvar mean = require('meanio');\nvar cluster = require('cluster');\nvar deferred = require('q').defer();\n\n\n// Code to run if we're in the master process or if we are not in debug mode/ running tests\n\nif ((cluster.isMaster) &&\n  (process.execArgv.indexOf('--debug') < 0) &&\n  (process.env.NODE_ENV!=='test') && (process.env.NODE_ENV!=='development') &&\n  (process.execArgv.indexOf('--singleProcess')<0)) {\n//if (cluster.isMaster) {\n\n    console.log('for real!');\n    // Count the machine's CPUs\n    var cpuCount = process.env.CPU_COUNT || require('os').cpus().length;\n\n    // Create a worker for each CPU\n    for (var i = 0; i < cpuCount; i += 1) {\n        console.log ('forking ',i);\n        cluster.fork();\n    }\n\n    // Listen for dying workers\n    cluster.on('exit', function (worker) {\n        // Replace the dead worker, we're not sentimental\n        console.log('Worker ' + worker.id + ' died :(');\n        cluster.fork();\n\n    });\n\n// Code to run if we're in a worker process\n} else {\n\n    var workerId = 0;\n    if (!cluster.isMaster)\n    {\n        workerId = cluster.worker.id;\n    }\n// Creates and serves mean application\n    mean.serve({ workerid: workerId /* more options placeholder*/ }, function (app) {\n      var config = app.getConfig();\n      var port = config.https && config.https.port ? config.https.port : config.http.port;\n      console.log('Mean app started on port ' + port + ' (' + process.env.NODE_ENV + ') cluster.worker.id:', workerId);\n\n      deferred.resolve(app);\n    });\n}\n\nmodule.exports = deferred.promise;\n"]}